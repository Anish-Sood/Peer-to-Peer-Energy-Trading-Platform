// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./RewardToken.sol"; // Import the RewardToken contract

contract EnergyTrading {
    struct AuctionItem {
        address payable seller;
        uint256 energyAmount;
        uint256 reservePrice;
        uint256 highestBid;
        address payable highestBidder;
        uint256 auctionEndTime;
        string latitude;
        string longitude;
        bool ended;
    }

    mapping(uint256 => AuctionItem) public auctions;
    uint256 public auctionCount;

    mapping(address => uint256) public energyPurchased; // Track energy purchased by each account
    mapping(address => uint256) public energySold; // Track total energy sold by each seller

    RewardToken public rewardToken; // Instance of the RewardToken contract

    event AuctionCreated(uint256 auctionId, uint256 reservePrice, uint256 auctionEndTime, string latitude, string longitude);
    event NewBidPlaced(uint256 auctionId, address bidder, uint256 bidAmount);
    event AuctionEnded(uint256 auctionId, address winner, uint256 winningBid);

    // Constructor to set the RewardToken contract address
    constructor(address _rewardToken) {
        rewardToken = RewardToken(_rewardToken);
    }

    // Function for the seller to create an auction for energy, now includes latitude and longitude
    function createAuction(
        uint256 _energyAmount,
        uint256 _reservePrice,
        uint256 _duration,
        string memory _latitude,
        string memory _longitude
    ) public {
        require(_energyAmount > 0, "Energy amount must be greater than zero");
        require(_reservePrice > 0, "Reserve price must be greater than zero");

        auctionCount++;
        uint256 auctionId = auctionCount;

        auctions[auctionId] = AuctionItem({
            seller: payable(msg.sender),
            energyAmount: _energyAmount,
            reservePrice: _reservePrice * 1 ether,
            highestBid: 0,
            highestBidder: payable(address(0)),
            auctionEndTime: block.timestamp + _duration,
            latitude: _latitude, // Set latitude
            longitude: _longitude, // Set longitude
            ended: false
        });

        emit AuctionCreated(auctionId, _reservePrice * 1 ether, block.timestamp + _duration, _latitude, _longitude);
    }

    // Function for buyers to place bids on energy auctions
    function placeBid(uint256 _auctionId) public payable {
        AuctionItem storage auction = auctions[_auctionId];

        require(block.timestamp < auction.auctionEndTime, "Auction has ended");
        require(msg.value > auction.highestBid, "There already is a higher bid");
        require(msg.value >= auction.reservePrice, "Bid does not meet the reserve price");

        if (auction.highestBid > 0) {
            auction.highestBidder.transfer(auction.highestBid); // Refund previous highest bidder
        }

        auction.highestBid = msg.value;
        auction.highestBidder = payable(msg.sender);

        emit NewBidPlaced(_auctionId, msg.sender, msg.value);
    }

    // Function to end the auction and transfer energy to the highest bidder
    function endAuction(uint256 _auctionId) public payable { // Marked as payable
        AuctionItem storage auction = auctions[_auctionId];

        require(block.timestamp >= auction.auctionEndTime, "Auction has not ended yet");
        require(!auction.ended, "Auction already ended");
        require(msg.sender == auction.seller, "Only the seller can end the auction");

        auction.ended = true;

        if (auction.highestBidder != address(0)) {
            auction.seller.transfer(auction.highestBid); // Transfer Ether to the seller
            energyPurchased[auction.highestBidder] += auction.energyAmount; // Track energy purchased
            energySold[auction.seller] += auction.energyAmount; // Track energy sold

            // Mint tokens for the buyer based on the Ether spent (proportional to the amount spent)
            uint256 rewardAmount = auction.highestBid * 100; // Example: Mint tokens in proportion to Ether spent
            rewardToken.mint(auction.highestBidder, rewardAmount); // Buyer receives tokens

            emit AuctionEnded(_auctionId, auction.highestBidder, auction.highestBid);
        } else {
            emit AuctionEnded(_auctionId, address(0), 0); // No bids were placed
        }
    }

    // Function to retrieve energy purchased by a specific buyer
    function getEnergyPurchased(address _buyer) public view returns (uint256) {
        return energyPurchased[_buyer];
    }

    // Function to retrieve energy sold by a specific seller
    function getEnergySold(address _seller) public view returns (uint256) {
        return energySold[_seller];
    }

    // Function to get details of all auctions, including status as "Ended" or "Ongoing", ID, latitude, and longitude
    function getAllAuctions() public view returns (
        AuctionItem[] memory, 
        string[] memory, 
        uint256[] memory, 
        string[] memory, 
        string[] memory
    ) {
        AuctionItem[] memory allAuctions = new AuctionItem[](auctionCount);
        string[] memory statuses = new string[](auctionCount);
        uint256[] memory auctionIds = new uint256[](auctionCount);
        string[] memory latitudes = new string[](auctionCount); // Store latitudes
        string[] memory longitudes = new string[](auctionCount); // Store longitudes

        for (uint256 i = 1; i <= auctionCount; i++) {
            allAuctions[i - 1] = auctions[i];
            statuses[i - 1] = auctions[i].ended ? "Ended" : "Ongoing";
            auctionIds[i - 1] = i;
            latitudes[i - 1] = auctions[i].latitude;
            longitudes[i - 1] = auctions[i].longitude;
        }

        return (allAuctions, statuses, auctionIds, latitudes, longitudes);
    }
}
